{"version":3,"sources":["app/App.js","serviceWorker.js","index.js"],"names":["EditorDemo","state","editorState","BraftEditor","createEditorState","outputContent","canvasConfig","dpi","window","devicePixelRatio","scale","name","imageControls","open","vertical","horizontal","hideDuration","message","submitContent","a","htmlContent","toHTML","setState","handleEditorChange","rawJSON","html2canvasHandle","element","html2canvas","then","canvas","downLoadImg","type","link","document","createElement","context","getContext","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingEnabled","imgData","toDataURL","quality","width","blob","dataURLtoBlob","objurl","URL","createObjectURL","download","href","click","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","this","e","target","value","className","onChange","onSave","media","accepts","image","video","audio","Input","placeholder","getName","bind","Button","onClick","refs","myInput","variant","color","id","ref","dangerouslySetInnerHTML","__html","Snackbar","anchorOrigin","autoHideDuration","resumeHideDuration","React","Component","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.584a0ff0.chunk.js","sourcesContent":["/*\n * @Date: 2020-05-28 10:21:23\n * @Author: xiazhengchun\n * @LastEditors: xiazhengchun\n * @LastEditTime: 2020-05-28 15:16:09\n * @Description: \n */\n// export default App;\nimport React from 'react'\n// import Button from '@material-ui/core/Button';\n// import Snackbar from '@material-ui/core/Snackbar';\nimport { Input, Snackbar, Button } from '@material-ui/core';\n// 引入编辑器组件\nimport BraftEditor from 'braft-editor'\nimport html2canvas from 'html2canvas'\n// 引入编辑器样式\nimport 'braft-editor/dist/index.css'\nimport 'braft-editor/dist/output.css'\nimport './App.css'\nexport default class EditorDemo extends React.Component {\n\n  state = {\n    // 创建一个空的editorState作为初始值\n    editorState: BraftEditor.createEditorState(null),\n    outputContent: '',\n    canvasConfig: {\n      dpi: window.devicePixelRatio * 3,\n      scale: 1,\n    },\n    name: '',\n    imageControls: [\n      'float-left', // 设置图片左浮动\n      'float-right', // 设置图片右浮动\n      'align-left', // 设置图片居左\n      'align-center', // 设置图片居中\n      'align-right', // 设置图片居右\n      'link', // 设置图片超链接\n      'size', // 设置图片尺寸\n      'remove' // 删除图片\n    ],\n    open: false,\n    vertical: 'top',\n    horizontal: 'right',\n    hideDuration: 2000,\n    message: ''\n  }\n\n  async componentDidMount() {\n    // 假设此处从服务端获取html格式的编辑器内容\n    // const htmlContent = await fetchEditorContent()\n    // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat\n    this.setState({\n      editorState: BraftEditor.createEditorState('')\n    })\n  }\n\n  submitContent = async () => {\n    // 在编辑器获得焦点时按下ctrl+s会执行此方法\n    // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容\n    const htmlContent = this.state.editorState.toHTML()\n    // const result = await saveEditorContent(htmlContent)\n    this.setState({\n      outputContent: htmlContent\n    })\n  }\n  /**\n   * @description: 编辑器改变\n   * @param {type} \n   * @return: \n   */\n  handleEditorChange = (editorState) => {\n    const rawJSON = editorState.toHTML()\n    this.setState({ editorState, outputContent: rawJSON })\n  }\n  /**\n   * @description: html转canvas\n   * @param {type} \n   * @return: \n   */\n  html2canvasHandle = (element) => {\n    let { name } = this.state;\n    html2canvas(element, this.state.canvasConfig).then(canvas => {\n      this.downLoadImg(canvas, name)\n    })\n  }\n  getName(e) {\n    this.setState({\n      name: e.target.value\n    })\n  }\n  downLoadImg = (canvas, name, type = 'jpg') => {\n    if (!canvas) {\n      this.setState({\n        open: true,\n        message: '请先生成文件'\n      })\n      return;\n    }\n    if (!name) {\n      this.setState({\n        open: true,\n        message: \"请输入文件名name\"\n      })\n      return;\n    }\n    const link = document.createElement('a');\n    const context = canvas.getContext('2d');\n    // 【重要】关闭抗锯齿\n    context.mozImageSmoothingEnabled = false;\n    context.webkitImageSmoothingEnabled = false;\n    context.msImageSmoothingEnabled = false;\n    context.imageSmoothingEnabled = false;\n    const imgData = canvas.toDataURL({\n      quality: 1,\n      width: 750,\n    });\n    const blob = this.dataURLtoBlob(imgData);\n    const objurl = URL.createObjectURL(blob);\n    link.download = `${name}.${type}`;\n    link.href = objurl;\n    link.click();\n  }\n  dataURLtoBlob = (dataurl) => {\n    const arr = dataurl.split(',');\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], { type: mime });\n  }\n  render() {\n\n    const { editorState, outputContent, name, imageControls, open, message, vertical, horizontal, hideDuration } = this.state\n    return (\n      <div className=\"my-component\">\n        <section className=\"EditorLeft\">\n          <header>输入</header>\n          <BraftEditor\n            value={editorState}\n            onChange={this.handleEditorChange}\n            onSave={this.submitContent}\n            imageControls={imageControls}\n            media={{\n              accepts: {\n                image: 'image/png,image/jpeg,image/gif,image/webp,image/apng,image/svg',\n                video: 'video/mp4',\n                audio: 'audio/mp3'\n              }\n            }}\n          />\n        </section>\n        <section className=\"resultRight\">\n          <header>\n            <span>输出</span>\n            <Input placeholder=\"生成的文件名\" value={name} onChange={this.getName.bind(this)} className=\"input-box\" />\n            <Button onClick={this.html2canvasHandle.bind(this, this.refs.myInput)} variant=\"contained\" color=\"primary\">导出文件</Button></header>\n          <div id=\"braft-output-content\" ref='myInput' className=\"braft-output-content\" dangerouslySetInnerHTML={{ __html: outputContent }}>\n          </div>\n        </section>\n        <Snackbar\n          anchorOrigin={{ vertical, horizontal }}\n          open={open}\n          message={message}\n          autoHideDuration={hideDuration}\n          resumeHideDuration={hideDuration}\n        />\n      </div>\n    )\n\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Fragment>\n    <header className=\"title\">都怪ps技术不行只能搞搞小聪明-图片生成工具</header>\n    <App />\n  </Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}